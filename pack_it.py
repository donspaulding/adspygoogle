#!/usr/bin/python
#
# Copyright 2010 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Script to pack the client library into a .tar.gz ball.

Usage:
  $ python pack_it.py adwords
"""

__author__ = 'api.sgrinberg@gmail.com (Stan Grinberg)'

import os
import platform
import shutil
import sys
sys.path.append(os.path.join('..', '..', '..'))


LIBS = ['adwords', 'adxbuyer', 'dfa', 'dfp']


def Main(argv):
  if not argv or len(argv) > 1 or argv[0] not in LIBS:
    print ('Nothing was done. Make sure to pass in the right argument: %s'
           % LIBS)
    return

  LIB_NAME = LIB_URL = LIB_VERSION = ''
  exec 'from adspygoogle.%s import LIB_NAME' % argv[0]
  exec 'from adspygoogle.%s import LIB_URL' % argv[0]
  exec 'from adspygoogle.%s import LIB_VERSION' % argv[0]

  LIB_TAG = '%s_api_python_%s' % (argv[0], LIB_VERSION)
  SOURCE_DIR = os.path.abspath('.')
  TARGET_DIR = '/usr/local/lib/py/%s' % LIB_TAG
  TARGET_PKG_DIR = os.path.join(TARGET_DIR, 'adspygoogle')
  TARGET_LIB_DIR = os.path.join(TARGET_PKG_DIR, argv[0])
  TARGET_DOCS_DIR = os.path.join(TARGET_DIR, 'docs')
  TARGET_EXMPLS_DIR = os.path.join(TARGET_DIR, 'examples', 'adspygoogle',
                                   argv[0])
  TARGET_LOGS_DIR = os.path.join(TARGET_DIR, 'logs')
  TARGET_SCRIPTS_DIR = os.path.join(TARGET_DIR, 'scripts', 'adspygoogle',
                                    argv[0])
  TARGET_TESTS_DIR = os.path.join(TARGET_DIR, 'tests')

  # If there is an existing copy of the target directory, remove it.
  if os.path.exists(os.path.abspath(TARGET_DIR)):
    shutil.rmtree(os.path.abspath(TARGET_DIR))

  # Create target directory.
  os.mkdir(TARGET_DIR)

  # Recursively copy client library code into target package directory.
  shutil.copytree(os.path.join(SOURCE_DIR, 'adspygoogle', argv[0]),
                  TARGET_LIB_DIR)
  shutil.copytree(os.path.join(SOURCE_DIR, 'adspygoogle', 'common'),
                  os.path.join(TARGET_PKG_DIR, 'common'))
  shutil.copyfile(os.path.join(SOURCE_DIR, 'adspygoogle', '__init__.py'),
                  os.path.join(TARGET_PKG_DIR, '__init__.py'))

  # Copy the rest of the data that comes with client library.
  shutil.copytree(os.path.join(SOURCE_DIR, 'docs'), TARGET_DOCS_DIR)
  shutil.copytree(os.path.join(SOURCE_DIR, 'examples', 'adspygoogle', argv[0]),
                  TARGET_EXMPLS_DIR)
  shutil.copytree(os.path.join(SOURCE_DIR, 'logs'), TARGET_LOGS_DIR)
  shutil.copytree(os.path.join(SOURCE_DIR, 'scripts', 'adspygoogle', argv[0]),
                  TARGET_SCRIPTS_DIR)
  shutil.copyfile(os.path.join(SOURCE_DIR, 'scripts', 'README'),
                  os.path.join(TARGET_DIR, 'scripts', 'README'))
  shutil.move(os.path.join(TARGET_SCRIPTS_DIR, 'config.py'),
              os.path.join(TARGET_DIR, 'config.py'))
  shutil.move(os.path.join(TARGET_SCRIPTS_DIR, 'setup.py'),
              os.path.join(TARGET_DIR, 'setup.py'))
  shutil.copytree(os.path.join(SOURCE_DIR, 'tests', 'adspygoogle', argv[0]),
                  os.path.join(TARGET_TESTS_DIR, 'adspygoogle', argv[0]))
  shutil.copytree(os.path.join(SOURCE_DIR, 'tests', 'adspygoogle', 'common'),
                  os.path.join(TARGET_TESTS_DIR, 'adspygoogle', 'common'))
  shutil.copyfile(os.path.join(SOURCE_DIR, 'tests', '__init__.py'),
                  os.path.join(TARGET_TESTS_DIR, '__init__.py'))
  shutil.copyfile(os.path.join(SOURCE_DIR, 'tests', 'adspygoogle',
                               '__init__.py'),
                  os.path.join(TARGET_TESTS_DIR, 'adspygoogle', '__init__.py'))
  shutil.copyfile(os.path.join(SOURCE_DIR, 'COPYING'),
                  os.path.join(TARGET_DIR, 'COPYING'))
  shutil.move(os.path.join(TARGET_LIB_DIR, 'README'),
              os.path.join(TARGET_DIR, 'README'))

  # Perform clean up, generated docs, and adjust permissions.
  os.chdir(TARGET_DIR)
  os.system('find docs \( -not -name \'docs\' -and -not -name \'README\' \) | '
            'xargs rm')
  os.system('epydoc -q --name "%s" --url "%s" --html adspygoogle '
            '--exclude=_services -o docs' % (LIB_NAME, LIB_URL))
  os.system('perl -pi -e \'s/Generated by Epydoc (\d+\.\d+\.\d+) .*/Generated '
            'by Epydoc $1/\' docs/*')
  os.system('find . \( -name \'*.pkl\' -or -name \'*.log\' -or -name \'*.pyc\' '
            '-or -name \'.project\' -or -name \'.pydevproject\' -or -name '
            '\'.settings\' \) | xargs rm -fr')
  # Remove any ._* files.
  if platform.system() == 'Darwin' and platform.mac_ver()[0] >= '10.5':
    os.system('dot_clean --keep=native .')

  # Package target directory into .tar.gz and adjust permissions.
  os.chdir(os.path.abspath(os.path.join(TARGET_DIR, '..')))
  os.system('tar -cf %s.tar %s/' % (LIB_TAG, LIB_TAG))
  os.system('gzip %s.tar' % LIB_TAG)


if __name__ == '__main__':
  Main(sys.argv[1:])
