################################################## 
# ForecastService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://www.google.com/apis/ads/publisher/v201108
##############################

class ns0:
    targetNamespace = "https://www.google.com/apis/ads/publisher/v201108"

    class AdUnitAfcSizeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AdUnitAfcSizeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdUnitAfcSizeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","AdUnitAfcSizeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdUnitAfcSizeError_Def.__bases__:
                bases = list(ns0.AdUnitAfcSizeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdUnitAfcSizeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdUnitCodeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AdUnitCodeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AdUnitCodeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","AdUnitCodeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AdUnitCodeError_Def.__bases__:
                bases = list(ns0.AdUnitCodeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AdUnitCodeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TechnologyTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "TechnologyTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TechnologyTargeting_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","BandwidthGroupTargeting",lazy=False)(pname=(ns,"bandwidthGroupTargeting"), aname="_bandwidthGroupTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","BrowserTargeting",lazy=False)(pname=(ns,"browserTargeting"), aname="_browserTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","BrowserLanguageTargeting",lazy=False)(pname=(ns,"browserLanguageTargeting"), aname="_browserLanguageTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","OperatingSystemTargeting",lazy=False)(pname=(ns,"operatingSystemTargeting"), aname="_operatingSystemTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bandwidthGroupTargeting = None
                    self._browserTargeting = None
                    self._browserLanguageTargeting = None
                    self._operatingSystemTargeting = None
                    return
            Holder.__name__ = "TechnologyTargeting_Holder"
            self.pyclass = Holder

    class ApiVersionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ApiVersionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiVersionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ApiVersionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ApiVersionError_Def.__bases__:
                bases = list(ns0.ApiVersionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ApiVersionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class AppliedLabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AppliedLabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AppliedLabel_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"labelId"), aname="_labelId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isNegated"), aname="_isNegated", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._labelId = None
                    self._isNegated = None
                    return
            Holder.__name__ = "AppliedLabel_Holder"
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Authentication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Authentication.Type"), aname="_Authentication_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Authentication_Type = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BandwidthGroup_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "BandwidthGroup")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BandwidthGroup_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Technology_Def not in ns0.BandwidthGroup_Def.__bases__:
                bases = list(ns0.BandwidthGroup_Def.__bases__)
                bases.insert(0, ns0.Technology_Def)
                ns0.BandwidthGroup_Def.__bases__ = tuple(bases)

            ns0.Technology_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BandwidthGroupTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "BandwidthGroupTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BandwidthGroupTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isTargeted"), aname="_isTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Technology",lazy=False)(pname=(ns,"bandwidthGroups"), aname="_bandwidthGroups", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isTargeted = None
                    self._bandwidthGroups = []
                    return
            Holder.__name__ = "BandwidthGroupTargeting_Holder"
            self.pyclass = Holder

    class Browser_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Browser")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Browser_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"majorVersion"), aname="_majorVersion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minorVersion"), aname="_minorVersion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Technology_Def not in ns0.Browser_Def.__bases__:
                bases = list(ns0.Browser_Def.__bases__)
                bases.insert(0, ns0.Technology_Def)
                ns0.Browser_Def.__bases__ = tuple(bases)

            ns0.Technology_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BrowserLanguage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "BrowserLanguage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BrowserLanguage_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Technology_Def not in ns0.BrowserLanguage_Def.__bases__:
                bases = list(ns0.BrowserLanguage_Def.__bases__)
                bases.insert(0, ns0.Technology_Def)
                ns0.BrowserLanguage_Def.__bases__ = tuple(bases)

            ns0.Technology_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BrowserLanguageTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "BrowserLanguageTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BrowserLanguageTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isTargeted"), aname="_isTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Technology",lazy=False)(pname=(ns,"browserLanguages"), aname="_browserLanguages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isTargeted = None
                    self._browserLanguages = []
                    return
            Holder.__name__ = "BrowserLanguageTargeting_Holder"
            self.pyclass = Holder

    class BrowserTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "BrowserTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BrowserTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isTargeted"), aname="_isTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Technology",lazy=False)(pname=(ns,"browsers"), aname="_browsers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isTargeted = None
                    self._browsers = []
                    return
            Holder.__name__ = "BrowserTargeting_Holder"
            self.pyclass = Holder

    class CityLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CityLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CityLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"cityName"), aname="_cityName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"regionCode"), aname="_regionCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Location_Def not in ns0.CityLocation_Def.__bases__:
                bases = list(ns0.CityLocation_Def.__bases__)
                bases.insert(0, ns0.Location_Def)
                ns0.CityLocation_Def.__bases__ = tuple(bases)

            ns0.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ClientLogin_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ClientLogin")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ClientLogin_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Authentication_Def not in ns0.ClientLogin_Def.__bases__:
                bases = list(ns0.ClientLogin_Def.__bases__)
                bases.insert(0, ns0.Authentication_Def)
                ns0.ClientLogin_Def.__bases__ = tuple(bases)

            ns0.Authentication_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CommonError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CommonError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CommonError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","CommonError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CommonError_Def.__bases__:
                bases = list(ns0.CommonError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CommonError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CountryLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CountryLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CountryLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Location_Def not in ns0.CountryLocation_Def.__bases__:
                bases = list(ns0.CountryLocation_Def.__bases__)
                bases.insert(0, ns0.Location_Def)
                ns0.CountryLocation_Def.__bases__ = tuple(bases)

            ns0.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CreativePlaceholder_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CreativePlaceholder")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CreativePlaceholder_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Size",lazy=False)(pname=(ns,"size"), aname="_size", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CreativePlaceholder",lazy=True)(pname=(ns,"companions"), aname="_companions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._size = None
                    self._companions = []
                    self._id = None
                    return
            Holder.__name__ = "CreativePlaceholder_Holder"
            self.pyclass = Holder

    class CustomCriteria_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CustomCriteria")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomCriteria_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"keyId"), aname="_keyId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"valueIds"), aname="_valueIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CustomCriteria.ComparisonOperator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CustomCriteriaNode_Def not in ns0.CustomCriteria_Def.__bases__:
                bases = list(ns0.CustomCriteria_Def.__bases__)
                bases.insert(0, ns0.CustomCriteriaNode_Def)
                ns0.CustomCriteria_Def.__bases__ = tuple(bases)

            ns0.CustomCriteriaNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomCriteriaSet_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CustomCriteriaSet")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomCriteriaSet_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","CustomCriteriaSet.LogicalOperator",lazy=False)(pname=(ns,"logicalOperator"), aname="_logicalOperator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CustomCriteriaNode",lazy=False)(pname=(ns,"children"), aname="_children", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CustomCriteriaNode_Def not in ns0.CustomCriteriaSet_Def.__bases__:
                bases = list(ns0.CustomCriteriaSet_Def.__bases__)
                bases.insert(0, ns0.CustomCriteriaNode_Def)
                ns0.CustomCriteriaSet_Def.__bases__ = tuple(bases)

            ns0.CustomCriteriaNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomCriteriaNode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CustomCriteriaNode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomCriteriaNode_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CustomCriteriaNode.Type"), aname="_CustomCriteriaNode_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomCriteriaNode_Type = None
                    return
            Holder.__name__ = "CustomCriteriaNode_Holder"
            self.pyclass = Holder

    class Date_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Date")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Date_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"month"), aname="_month", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"day"), aname="_day", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._year = None
                    self._month = None
                    self._day = None
                    return
            Holder.__name__ = "Date_Holder"
            self.pyclass = Holder

    class DateTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DateTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DateTime_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Date",lazy=False)(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"hour"), aname="_hour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minute"), aname="_minute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"second"), aname="_second", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeZoneID"), aname="_timeZoneID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._hour = None
                    self._minute = None
                    self._second = None
                    self._timeZoneID = None
                    return
            Holder.__name__ = "DateTime_Holder"
            self.pyclass = Holder

    class DayPart_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DayPart")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DayPart_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","DayOfWeek",lazy=False)(pname=(ns,"dayOfWeek"), aname="_dayOfWeek", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","TimeOfDay",lazy=False)(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","TimeOfDay",lazy=False)(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dayOfWeek = None
                    self._startTime = None
                    self._endTime = None
                    return
            Holder.__name__ = "DayPart_Holder"
            self.pyclass = Holder

    class DayPartTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DayPartTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DayPartTargeting_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","DayPart",lazy=False)(pname=(ns,"dayParts"), aname="_dayParts", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DeliveryTimeZone",lazy=False)(pname=(ns,"timeZone"), aname="_timeZone", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dayParts = []
                    self._timeZone = None
                    return
            Holder.__name__ = "DayPartTargeting_Holder"
            self.pyclass = Holder

    class DeliveryData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DeliveryData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DeliveryData_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._units = []
                    return
            Holder.__name__ = "DeliveryData_Holder"
            self.pyclass = Holder

    class DeliveryIndicator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DeliveryIndicator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DeliveryIndicator_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expectedDeliveryPercentage"), aname="_expectedDeliveryPercentage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"actualDeliveryPercentage"), aname="_actualDeliveryPercentage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._expectedDeliveryPercentage = None
                    self._actualDeliveryPercentage = None
                    return
            Holder.__name__ = "DeliveryIndicator_Holder"
            self.pyclass = Holder

    class Forecast_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Forecast")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Forecast_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderId"), aname="_orderId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","UnitType",lazy=False)(pname=(ns,"unitType"), aname="_unitType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"availableUnits"), aname="_availableUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"deliveredUnits"), aname="_deliveredUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"matchedUnits"), aname="_matchedUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"possibleUnits"), aname="_possibleUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reservedUnits"), aname="_reservedUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._orderId = None
                    self._unitType = None
                    self._availableUnits = None
                    self._deliveredUnits = None
                    self._matchedUnits = None
                    self._possibleUnits = None
                    self._reservedUnits = None
                    return
            Holder.__name__ = "Forecast_Holder"
            self.pyclass = Holder

    class ForecastError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ForecastError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ForecastError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ForecastError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ForecastError_Def.__bases__:
                bases = list(ns0.ForecastError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ForecastError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FrequencyCap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "FrequencyCap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FrequencyCap_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"maxImpressions"), aname="_maxImpressions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"numTimeUnits"), aname="_numTimeUnits", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","TimeUnit",lazy=False)(pname=(ns,"timeUnit"), aname="_timeUnit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maxImpressions = None
                    self._numTimeUnits = None
                    self._timeUnit = None
                    return
            Holder.__name__ = "FrequencyCap_Holder"
            self.pyclass = Holder

    class GeoTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "GeoTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GeoTargeting_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Location",lazy=False)(pname=(ns,"targetedLocations"), aname="_targetedLocations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Location",lazy=False)(pname=(ns,"excludedLocations"), aname="_excludedLocations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._targetedLocations = []
                    self._excludedLocations = []
                    return
            Holder.__name__ = "GeoTargeting_Holder"
            self.pyclass = Holder

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InventoryTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InventoryTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InventoryTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"targetedAdUnitIds"), aname="_targetedAdUnitIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludedAdUnitIds"), aname="_excludedAdUnitIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetedPlacementIds"), aname="_targetedPlacementIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._targetedAdUnitIds = []
                    self._excludedAdUnitIds = []
                    self._targetedPlacementIds = []
                    return
            Holder.__name__ = "InventoryTargeting_Holder"
            self.pyclass = Holder

    class InventoryTargetingError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InventoryTargetingError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InventoryTargetingError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","InventoryTargetingError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InventoryTargetingError_Def.__bases__:
                bases = list(ns0.InventoryTargetingError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InventoryTargetingError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InventoryUnitError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InventoryUnitError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InventoryUnitError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","InventoryUnitError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InventoryUnitError_Def.__bases__:
                bases = list(ns0.InventoryUnitError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InventoryUnitError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AdUnitSize_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AdUnitSize")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdUnitSize_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Size",lazy=False)(pname=(ns,"size"), aname="_size", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","EnvironmentType",lazy=False)(pname=(ns,"environmentType"), aname="_environmentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","AdUnitSize",lazy=True)(pname=(ns,"companions"), aname="_companions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._size = None
                    self._environmentType = None
                    self._companions = []
                    return
            Holder.__name__ = "AdUnitSize_Holder"
            self.pyclass = Holder

    class LineItem_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItem")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LineItem_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Targeting",lazy=False)(pname=(ns,"targeting"), aname="_targeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.LineItemSummary_Def not in ns0.LineItem_Def.__bases__:
                bases = list(ns0.LineItem_Def.__bases__)
                bases.insert(0, ns0.LineItemSummary_Def)
                ns0.LineItem_Def.__bases__ = tuple(bases)

            ns0.LineItemSummary_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemFlightDateError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemFlightDateError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LineItemFlightDateError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemFlightDateError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.LineItemFlightDateError_Def.__bases__:
                bases = list(ns0.LineItemFlightDateError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.LineItemFlightDateError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemOperationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemOperationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LineItemOperationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemOperationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.LineItemOperationError_Def.__bases__:
                bases = list(ns0.LineItemOperationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.LineItemOperationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LineItemSummary_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"orderId"), aname="_orderId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalId"), aname="_externalId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderName"), aname="_orderName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DateTime",lazy=False)(pname=(ns,"startDateTime"), aname="_startDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","StartDateTimeType",lazy=False)(pname=(ns,"startDateTimeType"), aname="_startDateTimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DateTime",lazy=False)(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unlimitedEndDateTime"), aname="_unlimitedEndDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CreativeRotationType",lazy=False)(pname=(ns,"creativeRotationType"), aname="_creativeRotationType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DeliveryRateType",lazy=False)(pname=(ns,"deliveryRateType"), aname="_deliveryRateType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","RoadblockingType",lazy=False)(pname=(ns,"roadblockingType"), aname="_roadblockingType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","FrequencyCap",lazy=False)(pname=(ns,"frequencyCaps"), aname="_frequencyCaps", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemType",lazy=False)(pname=(ns,"lineItemType"), aname="_lineItemType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"priority"), aname="_priority", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","UnitType",lazy=False)(pname=(ns,"unitType"), aname="_unitType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemSummary.Duration",lazy=False)(pname=(ns,"duration"), aname="_duration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unitsBought"), aname="_unitsBought", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Money",lazy=False)(pname=(ns,"costPerUnit"), aname="_costPerUnit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Money",lazy=False)(pname=(ns,"valueCostPerUnit"), aname="_valueCostPerUnit", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CostType",lazy=False)(pname=(ns,"costType"), aname="_costType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemDiscountType",lazy=False)(pname=(ns,"discountType"), aname="_discountType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"discount"), aname="_discount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"contractedUnitsBought"), aname="_contractedUnitsBought", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CreativePlaceholder",lazy=True)(pname=(ns,"creativePlaceholders"), aname="_creativePlaceholders", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","EnvironmentType",lazy=False)(pname=(ns,"environmentType"), aname="_environmentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CompanionDeliveryOption",lazy=False)(pname=(ns,"companionDeliveryOption"), aname="_companionDeliveryOption", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allowOverbook"), aname="_allowOverbook", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reserveAtCreation"), aname="_reserveAtCreation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Stats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DeliveryIndicator",lazy=False)(pname=(ns,"deliveryIndicator"), aname="_deliveryIndicator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DeliveryData",lazy=False)(pname=(ns,"deliveryData"), aname="_deliveryData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Money",lazy=False)(pname=(ns,"budget"), aname="_budget", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","ComputedStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","LineItemSummary.ReservationStatus",lazy=False)(pname=(ns,"reservationStatus"), aname="_reservationStatus", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isArchived"), aname="_isArchived", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","AppliedLabel",lazy=False)(pname=(ns,"appliedLabels"), aname="_appliedLabels", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","AppliedLabel",lazy=False)(pname=(ns,"effectiveAppliedLabels"), aname="_effectiveAppliedLabels", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disableSameAdvertiserCompetitiveExclusion"), aname="_disableSameAdvertiserCompetitiveExclusion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastModifiedByApp"), aname="_lastModifiedByApp", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notes"), aname="_notes", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LineItemSummary.Type"), aname="_LineItemSummary_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderId = None
                    self._id = None
                    self._name = None
                    self._externalId = None
                    self._orderName = None
                    self._startDateTime = None
                    self._startDateTimeType = None
                    self._endDateTime = None
                    self._unlimitedEndDateTime = None
                    self._creativeRotationType = None
                    self._deliveryRateType = None
                    self._roadblockingType = None
                    self._frequencyCaps = []
                    self._lineItemType = None
                    self._priority = None
                    self._unitType = None
                    self._duration = None
                    self._unitsBought = None
                    self._costPerUnit = None
                    self._valueCostPerUnit = None
                    self._costType = None
                    self._discountType = None
                    self._discount = None
                    self._contractedUnitsBought = None
                    self._creativePlaceholders = []
                    self._environmentType = None
                    self._companionDeliveryOption = None
                    self._allowOverbook = None
                    self._reserveAtCreation = None
                    self._stats = None
                    self._deliveryIndicator = None
                    self._deliveryData = None
                    self._budget = None
                    self._status = None
                    self._reservationStatus = None
                    self._isArchived = None
                    self._appliedLabels = []
                    self._effectiveAppliedLabels = []
                    self._disableSameAdvertiserCompetitiveExclusion = None
                    self._lastModifiedByApp = None
                    self._notes = None
                    self._LineItemSummary_Type = None
                    return
            Holder.__name__ = "LineItemSummary_Holder"
            self.pyclass = Holder

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Location_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Location.Type"), aname="_Location_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._Location_Type = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class MetroLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "MetroLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetroLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"metroCode"), aname="_metroCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Location_Def not in ns0.MetroLocation_Def.__bases__:
                bases = list(ns0.MetroLocation_Def.__bases__)
                bases.insert(0, ns0.Location_Def)
                ns0.MetroLocation_Def.__bases__ = tuple(bases)

            ns0.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currencyCode = None
                    self._microAmount = None
                    return
            Holder.__name__ = "Money_Holder"
            self.pyclass = Holder

    class NotNullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "NotNullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotNullError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","NotNullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotNullError_Def.__bases__:
                bases = list(ns0.NotNullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotNullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OAuth_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "OAuth")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OAuth_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"parameters"), aname="_parameters", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Authentication_Def not in ns0.OAuth_Def.__bases__:
                bases = list(ns0.OAuth_Def.__bases__)
                bases.insert(0, ns0.Authentication_Def)
                ns0.OAuth_Def.__bases__ = tuple(bases)

            ns0.Authentication_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperatingSystem_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "OperatingSystem")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OperatingSystem_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Technology_Def not in ns0.OperatingSystem_Def.__bases__:
                bases = list(ns0.OperatingSystem_Def.__bases__)
                bases.insert(0, ns0.Technology_Def)
                ns0.OperatingSystem_Def.__bases__ = tuple(bases)

            ns0.Technology_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OperatingSystemTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "OperatingSystemTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OperatingSystemTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"isTargeted"), aname="_isTargeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Technology",lazy=False)(pname=(ns,"operatingSystems"), aname="_operatingSystems", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isTargeted = None
                    self._operatingSystems = []
                    return
            Holder.__name__ = "OperatingSystemTargeting_Holder"
            self.pyclass = Holder

    class OrderError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "OrderError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OrderError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","OrderError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OrderError_Def.__bases__:
                bases = list(ns0.OrderError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OrderError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ParseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ParseError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ParseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ParseError_Def.__bases__:
                bases = list(ns0.ParseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ParseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PermissionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "PermissionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PermissionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","PermissionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PermissionError_Def.__bases__:
                bases = list(ns0.PermissionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PermissionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PostalCodeLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "PostalCodeLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PostalCodeLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Location_Def not in ns0.PostalCodeLocation_Def.__bases__:
                bases = list(ns0.PostalCodeLocation_Def.__bases__)
                bases.insert(0, ns0.Location_Def)
                ns0.PostalCodeLocation_Def.__bases__ = tuple(bases)

            ns0.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegExError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RegExError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegExError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","RegExError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RegExError_Def.__bases__:
                bases = list(ns0.RegExError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RegExError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RegionLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RegionLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RegionLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"regionCode"), aname="_regionCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Location_Def not in ns0.RegionLocation_Def.__bases__:
                bases = list(ns0.RegionLocation_Def.__bases__)
                bases.insert(0, ns0.Location_Def)
                ns0.RegionLocation_Def.__bases__ = tuple(bases)

            ns0.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredCollectionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredCollectionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredCollectionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","RequiredCollectionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredCollectionError_Def.__bases__:
                bases = list(ns0.RequiredCollectionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredCollectionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredNumberError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredNumberError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredNumberError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","RequiredNumberError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredNumberError_Def.__bases__:
                bases = list(ns0.RequiredNumberError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredNumberError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReservationDetailsError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ReservationDetailsError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReservationDetailsError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ReservationDetailsError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ReservationDetailsError_Def.__bases__:
                bases = list(ns0.ReservationDetailsError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ReservationDetailsError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ServerError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ServerError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ServerError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","ServerError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ServerError_Def.__bases__:
                bases = list(ns0.ServerError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ServerError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Size_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Size")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Size_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isAspectRatio"), aname="_isAspectRatio", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._isAspectRatio = None
                    return
            Holder.__name__ = "Size_Holder"
            self.pyclass = Holder

    class SoapRequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "SoapRequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapRequestHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"networkCode"), aname="_networkCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"applicationName"), aname="_applicationName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","Authentication",lazy=False)(pname=(ns,"authentication"), aname="_authentication", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._networkCode = None
                    self._applicationName = None
                    self._authentication = None
                    return
            Holder.__name__ = "SoapRequestHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._responseTime = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StatementError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "StatementError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatementError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","StatementError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatementError_Def.__bases__:
                bases = list(ns0.StatementError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatementError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Stats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Stats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Stats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"impressionsDelivered"), aname="_impressionsDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clicksDelivered"), aname="_clicksDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._impressionsDelivered = None
                    self._clicksDelivered = None
                    return
            Holder.__name__ = "Stats_Holder"
            self.pyclass = Holder

    class Targeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Targeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Targeting_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","GeoTargeting",lazy=False)(pname=(ns,"geoTargeting"), aname="_geoTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","InventoryTargeting",lazy=False)(pname=(ns,"inventoryTargeting"), aname="_inventoryTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","DayPartTargeting",lazy=False)(pname=(ns,"dayPartTargeting"), aname="_dayPartTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","TechnologyTargeting",lazy=False)(pname=(ns,"technologyTargeting"), aname="_technologyTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","CustomCriteriaSet",lazy=False)(pname=(ns,"customTargeting"), aname="_customTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","UserDomainTargeting",lazy=False)(pname=(ns,"userDomainTargeting"), aname="_userDomainTargeting", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._geoTargeting = None
                    self._inventoryTargeting = None
                    self._dayPartTargeting = None
                    self._technologyTargeting = None
                    self._customTargeting = None
                    self._userDomainTargeting = None
                    return
            Holder.__name__ = "Targeting_Holder"
            self.pyclass = Holder

    class Technology_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "Technology")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Technology_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Technology.Type"), aname="_Technology_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._Technology_Type = None
                    return
            Holder.__name__ = "Technology_Holder"
            self.pyclass = Holder

    class TimeOfDay_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "TimeOfDay")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TimeOfDay_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"hour"), aname="_hour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201108","MinuteOfHour",lazy=False)(pname=(ns,"minute"), aname="_minute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hour = None
                    self._minute = None
                    return
            Holder.__name__ = "TimeOfDay_Holder"
            self.pyclass = Holder

    class TypeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "TypeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TypeError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TypeError_Def.__bases__:
                bases = list(ns0.TypeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TypeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UniqueError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "UniqueError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UniqueError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.UniqueError_Def.__bases__:
                bases = list(ns0.UniqueError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.UniqueError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UserDomainTargeting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "UserDomainTargeting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UserDomainTargeting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"domains"), aname="_domains", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targeted"), aname="_targeted", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domains = []
                    self._targeted = None
                    return
            Holder.__name__ = "UserDomainTargeting_Holder"
            self.pyclass = Holder

    class AdUnitAfcSizeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AdUnitAfcSizeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdUnitCodeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AdUnitCodeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApiVersionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ApiVersionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CommonError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CommonError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CompanionDeliveryOption_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CompanionDeliveryOption")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ComputedStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ComputedStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CostType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CostType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CreativeRotationType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CreativeRotationType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CustomCriteria_ComparisonOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CustomCriteria.ComparisonOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CustomCriteriaSet_LogicalOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "CustomCriteriaSet.LogicalOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DayOfWeek_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DayOfWeek")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeliveryTimeZone_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DeliveryTimeZone")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeliveryRateType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "DeliveryRateType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EnvironmentType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "EnvironmentType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ForecastError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ForecastError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InventoryTargetingError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InventoryTargetingError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InventoryUnitError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "InventoryUnitError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemDiscountType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemDiscountType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemFlightDateError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemFlightDateError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemOperationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemOperationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemSummary_Duration_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemSummary.Duration")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemSummary_ReservationStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemSummary.ReservationStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "LineItemType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MinuteOfHour_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "MinuteOfHour")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotNullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "NotNullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OrderError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "OrderError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ParseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ParseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PermissionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "PermissionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegExError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RegExError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredCollectionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredCollectionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredNumberError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RequiredNumberError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReservationDetailsError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ReservationDetailsError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RoadblockingType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "RoadblockingType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServerError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "ServerError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StartDateTimeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "StartDateTimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatementError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "StatementError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TimeUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "TimeUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        type = (schema, "UnitType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class getForecast_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getForecast"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            ns = ns0.getForecast_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","LineItem",lazy=False)(pname=(ns,"lineItem"), aname="_lineItem", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","getForecast")
            kw["aname"] = "_getForecast"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItem = None
                    return
            Holder.__name__ = "getForecast_Holder"
            self.pyclass = Holder

    class getForecastResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getForecastResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            ns = ns0.getForecastResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Forecast",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","getForecastResponse")
            kw["aname"] = "_getForecastResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getForecastResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class getForecastById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getForecastById"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            ns = ns0.getForecastById_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"lineItemId"), aname="_lineItemId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","getForecastById")
            kw["aname"] = "_getForecastById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemId = None
                    return
            Holder.__name__ = "getForecastById_Holder"
            self.pyclass = Holder

    class getForecastByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getForecastByIdResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            ns = ns0.getForecastByIdResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201108","Forecast",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","getForecastByIdResponse")
            kw["aname"] = "_getForecastByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getForecastByIdResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapRequestHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapRequestHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapRequestHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201108"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201108","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://www.google.com/apis/ads/publisher/v201108)
